export DJANGO_SETTINGS_MODULE=config.settings.development
unset DJANGO_SETTINGS_MODULE

pip install -r requirements.txt

echo "# aegis_server" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/parkjgy/aegis_server.git
git push -u origin master

https://www.django-rest-framework.org
https://django-rest-swagger.readthedocs.io/en/latest/
pip install djangorestframework
pip install markdown   
pip install django-filter
pip install django-rest-swagger

pip install mysqlclient
	export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/
	brew install openssl

pip install pycrypto
pip install python-dateutil
pip install XlsxWriter

# 외부 서버 호출
http://docs.python-requests.org/en/master/
git clone git://github.com/requests/requests.git
cd requests
pip install .

>>> import requests
>>> r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
>>> r.status_code
200
>>> r.headers['content-type']
'application/json; charset=utf8'
>>> r.encoding
'utf-8'
>>> r.text
u'{"type":"User"...'
>>> r.json()
{u'private_gists': 419, u'total_private_repos': 77, ...}

외부 접속 계정 생성
mysql> CREATE USER 'ddtech'@'%' IDENTIFIED BY 'ddTech!!82';
mysql> GRANT ALL PRIVILEGES ON *.* TO 'ddtech'@'%' WITH GRANT OPTION;
mysql> FLUSH PRIVILEGES;
외부 접속 확인
mysql> SELECT Host,User,authentication_string FROM mysql.user;

(ddtenv) $ export DJANGO_SETTINGS_MODULE=config.settings.development
(ddtenv) $ python manage.py makemigrations employee
(ddtenv) $ python manage.py makemigrations operation
(ddtenv) $ python manage.py makemigrations customer
(ddtenv) $ python manage.py migrate

find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc"  -delete
python manage.py showmigrations

$ python manage.py migrate --fake employee zero
$ python manage.py flush



json_data = {
		'passer_id' : 'qgf6YHf1z2Fx80DR8o/Lvg',
		'dt' : '2018-01-21 08:25:30',
		'is_in' : 1, # 0: out, 1 : in
		'major' : 11001, # 11 (지역) 001(사업장)
		'beacons' : [
             {'minor': 11001, 'dt_begin': '2019-01-21 08:25:30', 'rssi': -70},
             {'minor': 11002, 'dt_begin': '2019-01-21 08:25:31', 'rssi': -70},
             {'minor': 11003, 'dt_begin': '2019-01-21 08:25:32', 'rssi': -70}
		]
	}

r = requests.post('http://0.0.0.0:8000/employee/pass_reg', json=json_data)

json_data = {
	'passer_id' : 'qgf6YHf1z2Fx80DR8o/Lvg',
	'dt' : '2018-12-28 12:53:36',
	'is_in' : 1, # 0: out, 1 : in
} 

r = requests.post('http://0.0.0.0:8000/employee/pass_verify', json=json_data)


* db migration error 처리 방법
    https://stackoverflow.com/questions/29888046/django-1-8-create-initial-migrations-for-existing-schema

1. table django_migrations 의 모든 항목을 지운다. 
    mysql> delete from django_migrations;
2. 각 프로젝트의 폴더를 지운다.
    $ rm -rf */migrations/
3. 마이그레이션을 재설정한다.(reset migrations)
    $ python manage.py migrate --fake
4. 마이그레이션을 만든다.
    $ python manage.py makemigrations
5. 마이그레이션을 실행한다.
    $ python manage.py migrate --fake-initial
6. 마이그레이션 한다.
    $ python manage.py migrate
